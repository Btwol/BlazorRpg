@page "/character"
@page "/character/{Id:int}"
@inject ICharacterClientService characterClientService

@if(Id==null)
{
    <PageTitle>Create a new Character</PageTitle>
    <h3>Create a new Character</h3>
}
else
{
    <PageTitle>Edit Character: @character.Name</PageTitle>
    <h3>Edit Character: @character.Name</h3>
}

<EditForm Model="character" OnSubmit="HandleSubmit">
    <div>
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="character.Name" class="form-control"></InputText>
    </div>
    @if(Id==null)
    {
        <div>
            <label for="Level">Level</label>
            <InputNumber id="Level" @bind-Value="character.Level" class="form-control"></InputNumber>
        </div>
        <div>
            <label for="Exp">Exp</label>
            <InputNumber id="Exp" @bind-Value="character.Exp" class="form-control"></InputNumber>
        </div>
    }
    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
    
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Character character = new Character();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save Second Test Model" : "Update Second Test Model";
        await characterClientService.GetAll();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id!=null) character = await characterClientService.GetById((int)Id);
    }

    async Task HandleSubmit()
    {
        if (Id == null) 
        {
            character.Class = CharacterClass.Mage;
            await characterClientService.Create(character);
        }
        else await characterClientService.Edit(character);
        navigationManager.NavigateTo("/characters");
    }

    async Task Delete()
    {
        await characterClientService.Delete(character.Id);
        navigationManager.NavigateTo("/characters");
    }
}
