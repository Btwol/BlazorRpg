@page "/encounter"
@inject ICombatClientService combatClientService

<h3>Encounter</h3>

<h2>Team 1</h2>
<div class="card-deck">
    @foreach(var combatant in combatClientService.currentCombatants.Where(c => c.IsPlayer))
    {
        var character = combatant.Combatant;
        <div class = "row bg-light">
            <div class = "col col-md-3">
                <p>
                <h5>@character.Name | Class: @character.Class | LV: @character.Level | EXP: @character.Exp</h5>
                <h5>HP: @character.HP/@combatant.CurrentHP</h5>
                </p>
                @*<button class="btn btn-primary" @onclick="(() => Remove(character, 1))"><i class="oi oi-plus"></i> Remove from Team</button>*@
            </div>
            <div class = "col col-md-1 d-flex flex-column justify-content-center align-item-center"></div>
            <hr>
        </div>
    }
</div>

<h2>Team 2</h2>
<div class="card-deck">
    @foreach(var combatant in combatClientService.currentCombatants.Where(c => !c.IsPlayer))
    {
        var character = combatant.Combatant;
        <div class = "row bg-light">
            <div class = "col col-md-3">
                <p>
                <h5>@character.Name | Class: @character.Class | LV: @character.Level | EXP: @character.Exp</h5>
                <h5>HP: @character.HP/@combatant.CurrentHP</h5>
                </p>
                @if(currentCombatant.IsPlayer)
                {
                    <button class="btn btn-primary" @onclick="(() => Target(combatant.Id))"><i class="oi oi-plus"></i> Target</button>
                }
            </div>
            <div class = "col col-md-1 d-flex flex-column justify-content-center align-item-center"></div>
            <hr>
        </div>
    }
</div>

@if (activeCombat)
{
    @if (currentCombatant.IsPlayer)
    {
        if (@combatClientService.currentCombatants.Where(c => c.Id == targetId).FirstOrDefault() != null)
        {
            <h3>Current Target: @combatClientService.currentCombatants.Where(c => c.Id == targetId).FirstOrDefault().Combatant.Name</h3>
        }
        else 
        {
            <h3>Current Target: None.</h3>
        }

        <h3>Current Action: @actionId</h3>
        <button class="btn btn-primary" @onclick="(() => Action(0))"><i class="oi oi-plus"></i> Attack Action</button>    
}
<hr />

<h3>It is @currentCombatant.Combatant.Name Turn</h3>
<button class="btn btn-primary" @onclick="(() => NextTurn())"><i class="oi oi-plus"></i> Next Turn (Commit)</button>
}
@if(!activeCombat)
{
    <button class="btn btn-primary" @onclick="(() => EndCombat())"><i class="oi oi-plus"></i> EndCombat</button>
}

@code {
    CurrentCombatant currentCombatant;
    //int turnCounter = 0;
    int actionId;
    int targetId;
    bool activeCombat = true;

    protected override async Task OnInitializedAsync()
    {
        await combatClientService.GetCurrentCombatants();
        SetCurrentCombatant();
    }

    async void SetCurrentCombatant()
    {
        currentCombatant = combatClientService.currentCombatants.Where(c => c.Turn).FirstOrDefault();
    }

    async void Target(int targetId)
    {
        this.targetId = targetId;
    }

    async void Action(int actionId)
    {
        this.actionId = actionId;
    }

    async Task NextTurn()
    {
        await combatClientService.NextTurn(new CombatAction { ActorId = currentCombatant.Id, ActionId = actionId, TargetId = targetId });
        if (!combatClientService.currentCombatants.Where(c => c.IsPlayer).Any(c => c.Status) || !combatClientService.currentCombatants.Where(c => !c.IsPlayer).Any(c => c.Status))
            activeCombat = false;
        actionId = -1;
        targetId = 0;
        SetCurrentCombatant();
    }

    async Task EndCombat()
    {
        await combatClientService.EndCombat();
        navigationManager.NavigateTo("teamselect");
    }
}
