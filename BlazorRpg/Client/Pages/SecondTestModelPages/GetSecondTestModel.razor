@page "/secondtestmodel"
@page "/secondtestmodel/{Id:int}"
@inject ISecondTestModelClientService SecondTestModelService
@inject NavigationManager navigationManager

@if(Id==null)
{
    <PageTitle>Create a new Second Test Model</PageTitle>
    <h3>Create a new Second Test Model</h3>
}
else
{
    <PageTitle>Edit Second Test Model @secondTestModel.Name</PageTitle>
    <h3>Edit Second Test Model @secondTestModel.Name</h3>
}

<EditForm Model="secondTestModel" OnSubmit="HandleSubmit">
    <div>
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="secondTestModel.Name" class="form-control"></InputText>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="Delete">Delete Second Test Model</button>
    
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    SecondTestModel secondTestModel = new SecondTestModel();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save Second Test Model" : "Update Second Test Model";
        await SecondTestModelService.GetAll();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id!=null) secondTestModel = await SecondTestModelService.GetById((int)Id);
    }

    async Task HandleSubmit()
    {
        if (Id == null) await SecondTestModelService.Create(secondTestModel);
        else await SecondTestModelService.Edit(secondTestModel);
        navigationManager.NavigateTo("/secondtestmodels");
    }

    async Task Delete()
    {
        await SecondTestModelService.Delete(secondTestModel.Id);
        navigationManager.NavigateTo("/secondtestmodels");
    }
}
