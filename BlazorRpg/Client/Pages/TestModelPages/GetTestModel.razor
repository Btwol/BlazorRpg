@page "/testmodel"
@page "/testmodel/{Id:int}"
@inject ITestModelClientService TestModelService
@inject ISecondTestModelClientService SecondTestModelService
@inject NavigationManager navigationManager

@if(Id==null)
{
    <PageTitle>Create a new Test Model</PageTitle>
    <h3>Create a new Test Model</h3>
}
else
{
    <PageTitle>Edit Test Model @testModel.Name</PageTitle>
    <h3>Edit Test Model @testModel.Name</h3>
}

<EditForm Model="testModel" OnSubmit="HandleSubmit">
    <div>
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="testModel.Name" class="form-control"></InputText>
    </div>
    <div>
        <label>Second Model</label><br/>
        <InputSelect @bind-Value="testModel.SecondTestModelId" class="form-select">
            @foreach(var secondModel in SecondTestModelService.SecondTestModels)
            {
                <option value="@secondModel.Id">@secondModel.Name</option>
            }
        </InputSelect>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteTestModel">Delete Test Model</button>
    
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    TestModel testModel = new TestModel { SecondTestModel = new SecondTestModel() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save Test Model" : "Update Test Model";
        await SecondTestModelService.GetAll();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id==null)
        {
            testModel.SecondTestModel = SecondTestModelService.SecondTestModels[0];
            testModel.SecondTestModelId = testModel.SecondTestModel.Id;
        }
        else
        {
            testModel = await TestModelService.GetById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null) await TestModelService.Create(testModel);
        else await TestModelService.Edit(testModel);
        navigationManager.NavigateTo("/testmodels");
    }

    async Task DeleteTestModel()
    {
        await TestModelService.Delete(testModel.Id);
        navigationManager.NavigateTo("/testmodels");
    }
}
